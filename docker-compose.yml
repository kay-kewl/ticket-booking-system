services:
  postgres:
    image: postgres:16-alpine
    # container_name: postgres_db
    environment:
      - POSTGRES_USER=${POSTGRES_USER:-user}
      - POSTGRES_PASSWORD=${POSTGRES_PASSWORD:-password}
      - POSTGRES_DB=${POSTGRES_DB:-booking_db}
      - POSTGRES_PORT=${POSTGRES_PORT:-5432}
    ports:
      - "${POSTGRES_PORT:-5432}:5432"
    volumes:
      - pgdata:/var/lib/postgresql/data
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U $${POSTGRES_USER} -d $${POSTGRES_DB}"]
      interval: 10s
      timeout: 5s
      retries: 5
    networks:
      - booking-net

  migrate:
    image: migrate/migrate:v4.18.3
    volumes:
      - ./db/migrations:/migrations
    command: ["-path", "/migrations", "-database", "postgres://${POSTGRES_USER}:${POSTGRES_PASSWORD}@postgres:${POSTGRES_PORT}/${POSTGRES_DB}?sslmode=disable", "up"]
    depends_on:
      postgres:
        condition: service_healthy
    networks:
      - booking-net

  api-gateway:
    # container_name: api_gateway
    build:
      context: .
      dockerfile: ./Dockerfile
      args:
        SERVICE: api-gateway
        PORT: 8080
    ports:
      - "8080:8080"
    environment:
      - API_PORT=${API_PORT:-8080}
      - BOOKING_GRPC_PORT=${BOOKING_GRPC_PORT}
      - POSTGRES_USER=${POSTGRES_USER}
      - POSTGRES_PASSWORD=${POSTGRES_PASSWORD}
      - POSTGRES_PORT=${POSTGRES_PORT}
      - POSTGRES_DB=${POSTGRES_DB}
      - DATABASE_URL=postgres://${POSTGRES_USER}:${POSTGRES_PASSWORD}@postgres:${POSTGRES_PORT}/${POSTGRES_DB}?sslmode=disable
    # volumes:
    #   - .:/app
    depends_on:
      postgres:
        condition: service_healthy
      migrate:
        condition: service_completed_successfully
    networks:
      - booking-net

  auth-service:
    build:
      context: .
      dockerfile: ./Dockerfile
      args:
        SERVICE: auth-service
        PORT: 50051
    ports:
      - "50051:50051"
    environment:
      - AUTH_GRPC_PORT=${AUTH_GRPC_PORT}
      - POSTGRES_USER=${POSTGRES_USER}
      - POSTGRES_PASSWORD=${POSTGRES_PASSWORD}
      - POSTGRES_PORT=${POSTGRES_PORT}
      - POSTGRES_DB=${POSTGRES_DB}
    # volumes:
    #   - .:/app
    depends_on:
      postgres:
        condition: service_healthy
      migrate:
        condition: service_completed_successfully
    networks:
      - booking-net

  event-service:
    build:
      context: .
      dockerfile: ./Dockerfile
      args:
        SERVICE: event-service
        PORT: 50052
    ports:
      - "50052:50052"
    environment:
      - EVENT_GRPC_PORT=${EVENT_GRPC_PORT}
      - POSTGRES_USER=${POSTGRES_USER}
      - POSTGRES_PASSWORD=${POSTGRES_PASSWORD}
      - POSTGRES_PORT=${POSTGRES_PORT}
      - POSTGRES_DB=${POSTGRES_DB}
    depends_on:
      migrate:
        condition: service_completed_successfully
    networks:
      - booking-net

  booking-service:
    build:
      context: .
      dockerfile: ./Dockerfile
      args:
        SERVICE: booking-service
        PORT: 50053
    ports:
      - "50053:50053"
    environment:
      - BOOKING_GRPC_PORT=${BOOKING_GRPC_PORT}
      - POSTGRES_USER=${POSTGRES_USER}
      - POSTGRES_PASSWORD=${POSTGRES_PASSWORD}
      - POSTGRES_PORT=${POSTGRES_PORT}
      - POSTGRES_DB=${POSTGRES_DB}
    depends_on:
      migrate:
        condition: service_completed_successfully
    networks:
      - booking-net


volumes:
  pgdata:

networks:
  booking-net:
    driver: bridge
