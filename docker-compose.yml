services:
  postgres:
    image: postgres:16-alpine
    # container_name: postgres_db
    environment:
      - POSTGRES_USER=${POSTGRES_USER:-user}
      - POSTGRES_PASSWORD=${POSTGRES_PASSWORD:-password}
      - POSTGRES_DB=${POSTGRES_DB:-booking_db}
      - POSTGRES_PORT=${POSTGRES_PORT:-5432}
    ports:
      - "${POSTGRES_PORT:-5432}:5432"
    volumes:
      - pgdata:/var/lib/postgresql/data
      - ./scripts:/scripts
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U $${POSTGRES_USER} -d $${POSTGRES_DB}"]
      interval: 10s
      timeout: 5s
      retries: 5
    networks:
      - booking-net

  rabbitmq:
    image: rabbitmq:4.1-management-alpine
    container_name: rabbitmq
    ports:
      - "5672:5672"
      - "15672:15672"
    healthcheck:
      test: ["CMD", "rabbitmq-diagnostics", "check_running", "-q"]
      interval: 10s
      timeout: 5s
      retries: 5
    networks:
      - booking-net

  migrator:
    build:
      context: .
      dockerfile: docker/migrator/Dockerfile
    environment:
      - POSTGRES_USER=${POSTGRES_USER}
      - POSTGRES_PASSWORD=${POSTGRES_PASSWORD}
      - POSTGRES_PORT=${POSTGRES_PORT}
      - POSTGRES_DB=${POSTGRES_DB}
      - DATABASE_URL=postgres://${POSTGRES_USER}:${POSTGRES_PASSWORD}@postgres:5432/${POSTGRES_DB}?sslmode=disable
    depends_on:
      postgres:
        condition: service_healthy
    networks:
      - booking-net

  api-gateway:
    # container_name: api_gateway
    build:
      context: .
      dockerfile: ./services/api-gateway/Dockerfile
      args:
        SERVICE: api-gateway
        PORT: 8080
    ports:
      - "8080:8080"
    environment:
      - API_PORT=${API_PORT:-8080}
      - AUTH_GRPC_PORT=${AUTH_GRPC_PORT}
      - BOOKING_GRPC_PORT=${BOOKING_GRPC_PORT}
      - EVENT_GRPC_PORT=${EVENT_GRPC_PORT}
    # volumes:
    #   - .:/app
    depends_on:
      auth-service:
        condition: service_healthy
      event-service:
        condition: service_healthy
      booking-service:
        condition: service_healthy
    networks:
      - booking-net

  auth-service:
    build:
      context: .
      dockerfile: ./services/auth-service/Dockerfile
      args:
        SERVICE: auth-service
        # PORT: 50051
    ports:
      - "50051:50051"
    environment:
      - AUTH_GRPC_PORT=${AUTH_GRPC_PORT}
      - JWT_SECRET=${JWT_SECRET}
      - POSTGRES_USER=${POSTGRES_USER}
      - POSTGRES_PASSWORD=${POSTGRES_PASSWORD}
      - POSTGRES_PORT=${POSTGRES_PORT}
      - POSTGRES_DB=${POSTGRES_DB}
      - DATABASE_SCHEMA=auth
    # volumes:
    #   - ./services/auth-service/migrations:/app/migrations
    #   - .:/app
    # command: sh -c "PGPASSWORD=$${POSTGRES_PASSWORD} psql -U $${POSTGRES_USER} -h postgres -d $${POSTGRES_DB} -c \"CREATE SCHEMA IF NOT EXISTS $${DATABASE_SCHEMA};\" && migrate -path /app/migrations -database \"postgres://$${POSTGRES_USER}:$${POSTGRES_PASSWORD}@postgres:$${POSTGRES_PORT}/$${POSTGRES_DB}?sslmode=disable&search_path=$${DATABASE_SCHEMA}\" -verbose up && /app/server"
    depends_on:
      migrator:
        condition: service_completed_successfully
    healthcheck:
      test: ["CMD", "/bin/grpc_health_probe", "-addr=:50051"]
      interval: 10s
      timeout: 5s
      retries: 5
      start_period: 10s
    networks:
      - booking-net

  event-service:
    build:
      context: .
      dockerfile: ./services/event-service/Dockerfile
      args:
        SERVICE: event-service
        # PORT: 50052
    ports:
      - "50052:50052"
    environment:
      - EVENT_GRPC_PORT=${EVENT_GRPC_PORT}
      - POSTGRES_USER=${POSTGRES_USER}
      - POSTGRES_PASSWORD=${POSTGRES_PASSWORD}
      - POSTGRES_PORT=${POSTGRES_PORT}
      - POSTGRES_DB=${POSTGRES_DB}
      - DATABASE_SCHEMA=event
    # volumes:
    #   - ./services/event-service/migrations:/app/migrations
    # command: sh -c "PGPASSWORD=$${POSTGRES_PASSWORD} psql -U $${POSTGRES_USER} -h postgres -d $${POSTGRES_DB} -c \"CREATE SCHEMA IF NOT EXISTS $${DATABASE_SCHEMA};\" && migrate -path /app/migrations -database \"postgres://$${POSTGRES_USER}:$${POSTGRES_PASSWORD}@postgres:$${POSTGRES_PORT}/$${POSTGRES_DB}?sslmode=disable&search_path=$${DATABASE_SCHEMA}\" -verbose up && /app/server"
    depends_on:
      migrator:
        condition: service_completed_successfully
    healthcheck:
      test: ["CMD", "/bin/grpc_health_probe", "-addr=:50052"]
      interval: 10s
      timeout: 5s
      retries: 5
      start_period: 10s
    networks:
      - booking-net

  booking-service:
    build:
      context: .
      dockerfile: ./services/booking-service/Dockerfile
      args:
        SERVICE: booking-service
        # PORT: 50053
    ports:
      - "50053:50053"
    environment:
      - BOOKING_GRPC_PORT=${BOOKING_GRPC_PORT}
      - POSTGRES_USER=${POSTGRES_USER}
      - POSTGRES_PASSWORD=${POSTGRES_PASSWORD}
      - POSTGRES_PORT=${POSTGRES_PORT}
      - POSTGRES_DB=${POSTGRES_DB}
      - RABBITMQ_URL=${RABBITMQ_URL}
      - DATABASE_SCHEMA=booking
    # volumes:
    #   - ./services/booking-service/migrations:/app/migrations
    # command: sh -c "PGPASSWORD=$${POSTGRES_PASSWORD} psql -U $${POSTGRES_USER} -h postgres -d $${POSTGRES_DB} -c \"CREATE SCHEMA IF NOT EXISTS $${DATABASE_SCHEMA};\" && migrate -path /app/migrations -database \"postgres://$${POSTGRES_USER}:$${POSTGRES_PASSWORD}@postgres:$${POSTGRES_PORT}/$${POSTGRES_DB}?sslmode=disable&search_path=$${DATABASE_SCHEMA}\" -verbose up && /app/server"
    depends_on:
      migrator:
        condition: service_completed_successfully
      rabbitmq:
        condition: service_healthy
    healthcheck:
      test: ["CMD", "/bin/grpc_health_probe", "-addr=:50053"]
      interval: 10s
      timeout: 5s
      retries: 5
      start_period: 10s
    networks:
      - booking-net

  prometheus:
    image: prom/prometheus:v3.5.0
    container_name: prometheus
    ports:
      - "9090:9090"
    volumes:
      - ./deploy/prometheus/prometheus.yml:/etc/prometheus/prometheus.yml
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
    networks:
      - booking-net

  grafana:
    image: grafana/grafana:12.1.1
    container_name: grafana
    ports:
      - "3000:3000"
    depends_on:
      - prometheus
    networks:
      - booking-net

volumes:
  pgdata:

networks:
  booking-net:
    driver: bridge
